'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/panel/','title':"Le Panel",'section':"Docs",'content':"Le Panel #  Le site internet d’INACT utilise C.M.S. 1 Kirby 3. Vous trouverez une documentation détaillée du C.M.S. sur leur site internet (en anglais). N’hésitez pas à y faire un tour si vous êtes curieux·euse.\nLe Panel est le back-office, ou bureau arrière du site internet. C’est un outil de gestion qui vous permet de modifier le contenu du site internet, c’est-à-dire de changer les textes, modifier les photos, ajouter des vidéos, changer les dates d’un événement, créer et supprimer des pages, etc. et qui n’est visible et accessible que par les administrateur·rice·s du site.\nÀ l’inverse du front-office, ou bureau avant, qui est la partie du site visible par tout le monde.\nSi vous êtes familier·ère·s avec Kirby 3, la structure du site d’INACT vous sera également familière. Si ce n’est pas le cas, voici quelques éléments important à avoir en tête avant de commencer.\n Se connecter au Panel Pour modifier le site internet, vous avez besoin de vous connecter au Panel\nEn savoir plus   Interface du Panel Le Panel est possède une interface très intuitive, mais quelques éléments sont à connaître pour l\u0026rsquo;utiliser à sa pleine capacité.\nEn savoir plus   Compte utilisateur·ice Pour vous connecter au Panel, vous avez besoin d’un compte utilisateur·ice.\nEn savoir plus      C.M.S. est l\u0026rsquo;abbréviation de Content Managment System en anglais, qui peut se traduire en système de gestion de contenu. \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':1,'href':'/docs/contenu/','title':"Le Contenu",'section':"Docs",'content':"Le Contenu [WIP] #  Cette section traite de la création et de l\u0026rsquo;édition du contenu au sein du Panel. Vous y trouverez des informations sur les contraintes techniques nécessaires à l\u0026rsquo;édition, le savoir de base à acquérir pour modifier le site internet et le les balisages textes essentiels.\nKirby est un flat file C.M.S, c\u0026rsquo;est-à-dire qu\u0026rsquo;il ne s\u0026rsquo;appuie pas sur une base de données pour ordonner le contenu du site internet, mais sur une structure arborescente, comme celle des dossiers d\u0026rsquo;un ordinateur. Chaque page représente un dossier, dans lequel sont placé un fichier texte et des images, qui sont le contenu de la page. Ce dossier peut contenir des sous-dossiers, qui sont ici des sous-pages, qui contiennent eux-mêmes des fichiers textes et des images, et peuvent aussi contenir des sous-pages, etc.\nUne page contenant des sous-pages est appellée une page parente, et ses sous-pages sont des pages enfants. Dans cette logique, une page peut être parente de pluiseurs sous-pages et également enfant d\u0026rsquo;une autre page.\nVous y trouverez des informations importante concernant le Markdown, le langage de formatage utilisé par le Panel pour baliser le texte du site.\nÉgalement, un centre de ressource concernant le contenu dynamique et le Kirbytext, utilisé pour intégrer des éléments interactifs et dynamiques dans les pages, commes des fichiers, des images, des vidéos ou des sons.\nAinsi, à différents endroits du Panel, vous aurez la possibilité de modifier, de créer ou de supprimer des page.\nLes pages contiennent des informations textuelles que vous serez amené à modifier.\nLes pages peuvent contenir n\u0026rsquo;importe quel nombre d\u0026rsquo;images, de vidéos, de documents ou tout autre fichier. Ces fichiers sont stockés directement dans le dossier de la page.\n"});index.add({'id':2,'href':'/posts/version-1-0-4/','title':"Changelog : Version 1.0.4",'section':"Blog",'content':"Hello #  Voici la nouvelle mise à jour du site d\u0026rsquo;INACT\n"});index.add({'id':3,'href':'/posts/creating-a-new-theme/','title':"Creating a New Theme",'section':"Blog",'content':"Introduction #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug $ Some Definitions #  There are a few concepts that you need to understand before creating a theme.\nSkins #  Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page #  The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File #  When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent #  Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter #  The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown #  Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files #  Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template #  A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template #  A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template #  A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site #  Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site #  Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site #  Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme #  Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton #  Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;zafta\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme #  Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026quot;zafta\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;zafta - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $ Generate the Site #  Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page #  Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static #  Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle #  When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory #  When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option #  Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload #  Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands #  Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template #  The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page #  Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload #  Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page #  \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts #  Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026quot;\u0026quot; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot; title = \u0026quot;first\u0026quot; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot; title = \u0026quot;second\u0026quot; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates #  In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage #  The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts #  We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File #  $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content #  The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing #  We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages #  Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026quot;about\u0026quot; description = \u0026quot;about this site\u0026quot; date = \u0026quot;2014-09-27\u0026quot; slug = \u0026quot;about time\u0026quot; +++ ## about us i'm speechless :wq Generate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026quot;page\u0026quot; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates #  If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials #  In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials #  The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }} versus\n{{ partial \u0026quot;header.html\u0026quot; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials #  $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts #  It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template #  We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself #  DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"});index.add({'id':4,'href':'/posts/migrate-from-jekyll/','title':"Migrate to Hugo from Jekyll",'section':"Blog",'content':"Move static content to static #  Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file #  Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site #  The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public    Or, change the Hugo configuration to use _site instead of public.\n { .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }    Convert Jekyll templates to Hugo templates #  That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes #  Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation #  As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage #  I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches #  Fix content #  Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up #  You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff #   Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"});index.add({'id':5,'href':'/docs/panel/connect/','title':"Connexion et déconnexion",'section':"Le Panel",'content':"Se connecter ou se déconnecter du Panel #  Pour modifier le site internet, vous avez besoin de vous connecter au Panel.\nSe connecter au Panel #  Pour vous connecter au panel, vous devez vous rendre à l’adresse : https://www.inact.fr/panel avec votre navigateur.\nUn écran de connexion s’affiche, avec un formulaire. Dans les deux champs de celui-ci, renseignez l’email et le mot de passe de votre compte utilisateur·ice puis cliquez sur bouton login. Vous pouvez, en plus, cocher une case pour demander au site internet de vos garder en ligne le plus longtemps possible.\n  Se déconnecter du Panel #  Pour vous déconnecter du Panel, allez sur le menu déroulant représenté par un bouton hamburger. Dans la liste d’options affichées, vous devez cliquer sur le bouton se déconnecter en bas de la liste pour vous déconnecter du Panel.\n "});index.add({'id':6,'href':'/docs/contenu/pages/','title':"Pages et publications",'section':"Le Contenu",'content':"Pages et publications #  Toutes les interactions que vous aurez avec le contenu du site internet au travers du Panel se feront grâce aux pages.\nChaque page comporte des possibilités d\u0026rsquo;édition différentes, liée à son importance dans la hiérarchie du site internet. Cette section détaille les informations essentielles et communes à toutes les pages du site internet.\nStatut des pages #  Les status des pages vous permettent plus de contrôle sur le processus de publication. Des brouillons, aux pages non listées jusqu\u0026rsquo;au pages publiques (ou publiées) chaque status défini le comportement de la page au sein du site.\n \u0026gt; En savoir plus\n Création, modification et suppression des pages #  Dans le Panel, vous interagissez avec des pages. En plus de modifier leur contenu, vous allez devoir définir les paramètres essentiels à la bonne tenue des pages dans le site internet. Cette section vous explique comment créer une page, comment modifier ses paramètres et comment la supprimer.\n \u0026gt; Créer des pages\n \u0026gt; Modifier ou supprimer des pages\n Processus de travail collaboratif #  Kirby possède quelques gardes-fou et systèmes de travail collaboratif à connaître pour utiliser le C.M.S. le mieux possible. Ainsi, lorsque vous travaillez sur le Panel, vos changement sont sauvegardés et **la page est vérouillée. Et lorsque vous vous connectez, vous pouvez voir les changement en cours et ce qui se fait actuellement.\n \u0026gt; En savoir plus\n"});index.add({'id':7,'href':'/docs/panel/interface/','title':"Interface",'section':"Le Panel",'content':"Interface du Panel #  En elle-même, l\u0026rsquo;interface est assez intuitive. Elle ressemble à tout autre logiciel d\u0026rsquo;édition de contenu que vous avez déjà pu recontrer.\nToutefois, la présente documentation fait régulièrement référence à quelques éléments important de son interface, aussi, il est important de les connaître et de savoir les utiliser.\n Haut de page #  Header #  La barre d\u0026rsquo;en-tête noire, en haut du site internet, ou header, comporte des éléments de navigation importants du Panel.\n Le header du Panel, à gauche, le hamburger qui donne accès au menu déroulant, au centre, le chemin d\u0026rsquo;arborescence et à droite, la loupe donnant accès à la recherche.\nHamburger \u0026amp; Menu déroulant #  À gauche de celle-ci, vous trouverez le bouton hamburger qui vous permet d’accéder au menu déroulant du site. Ce menu liste les sections principales :\n    Bouton Description     Site Le contenu du site internet   Utilisateurs Les comptes utilisateurs du site   Paramètres Les paramètres du site internet   Votre compte La page du compte utilisateur que vous employez actuellement   Se déconnecter La possibilité de se déconnecter du Panel       Fil d\u0026rsquo;Ariane (Breadcrumb) #  Au centre du header est affiché le Fil d\u0026rsquo;Ariane, c\u0026rsquo;est à dire la liste des pages parentes* à la page dans laquelle vous vous trouvez. Dit autrement, c’est le chemin des pages qui contiennent la page actuelle. Vous pouvez cliquer sur le nom d’une page pour vous y rendre.\nDans l\u0026rsquo;exemple suivant, on retrouve la racine du site, la page Le Festival et la Soirée Breakaway qui est une sous-page de la page Le Festival.\n Recherche #  Le bouton en forme de loupe vous permet d’accéder à la recherche du Panel.\nGrâce à elle, vous pouvez rechercher des pages précises grâce à une liste de mot clés. Ainsi, vous pouvez accéder plus rapidement à des sections importantes du site internet. Elle est très pratique pour trouver des pages profondément enfouies dans l’arborescence du site.\nUne recherche sur festival donne une liste des pages ou ce mot est référencé.\n "});index.add({'id':8,'href':'/docs/contenu/markdown/','title':"Le Markdown",'section':"Le Contenu",'content':"Le Markdown #  Afin de mettre en forme le texte du site internet, le panel utilise le langage de balisage Markdown.\nMarkdown est un langage de balisage léger créé en 2004 par John Gruber avec l\u0026rsquo;aide d\u0026rsquo; Aaron Swartz. Son but est d\u0026rsquo;offrir une syntaxe facile à lire et à écrire, et de pouvoir permettre la lecture d’un texte sans lui donner l’impression d’être formaté par des instructions particulières. Coté front-office, le Markdown permet de produire un code HTML simple et efficace pour les articles, en évitant le côté souvent trop verbeux des éditeurs WYSIWYG.\nUn texte de la page À propos au sein de l\u0026rsquo;éditeur de texte, avec du Markdown, en back-office :\n Le même texte de la page À propos, sur le front-office :\n  Le Markdown vous permet d’employer les éléments de formatage suivants :\nTexte en gras #  Entourez le texte à mettre en gras, soit des symboles **, soit des symboles __ comme dans l’exemple suivant :\nVoici le **Festival des arts mutants**. Voici le __Festival des arts mutants__.  Texte en italique #  Entourez le texte à mettre en italique soit du symbole *, soit du symboles _, comme dans les exemples suivant :\nVoici le *Festival des arts mutants*. Voici le _Festival des arts mutants_.  Saut de ligne et paragraphes #  Le Markdown convertit automatiquement les sauts de ligne et les paragraphes présents dans le texte.\nMa première ligne Ma seconde ligne Un autre paragraphe.  Ligne horizontale #  Pour afficher une ligne horizontale de séparation du texte, utilisez les symboles **** entre deux sauts de paragraphes, par exemple :\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. **** Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Vous pouvez également utiliser les symboles ---- pour obtenir le même résultat.\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. ---- Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Titres #  Il est possible d’utiliser jusqu’à six niveau de titres, du h1, le plus grand titre, au h6, le plus petit titre.\nPour écrire un titre, placez le symbole # devant le titre.\nPour augmenter le niveau d’un titre, additionnez les symboles # :\n Ainsi, un titre h1 aura un seul # Un titre h3 aura trois ### Et un titre h6 aura six ######  # Titre 1 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. ## Titre 2 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. ### Titre 3 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. #### Titre 4 Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Adresses emails #  Vous pouvez insérer une adresse email cliquable au sein du texte de plusieurs manières.\nSoit vous pouvez entourer une adresse email des symboles \u0026lt; et \u0026gt;, comme dans l’exemple suivant :\n\u0026lt;contact@inact.fr\u0026gt; Ce qui affichera : contact@inact.fr\nPour afficher du texte avec le lien, utilisez le balisage suivant :\n[Envoyez-moi un email](mailto:contact@inact.fr) Ce qui affichera : Envoyez-moi un email\n Liens #  Vous pouvez insérer un lien cliquable au sein du texte de plusieurs manières.\nSoit vous pouvez écrire directement l\u0026rsquo;url, comme dans l’exemple suivant :\nww.inact.fr Ce qui affichera : www.inact.fr\nSi vous souhaitez afficher du texte avec le lien, vous pouvez utilisez la solution suivante :\n[Le site de l’association INACT](www.inact.fr) Ce qui affichera : Le site de l’association INACT\n Listes #  Vous pouvez créer des listes ordonnées ou des listes non ordonnées des manières suivantes\nListe ordonnées : #  Ma liste : 1. La performance 2. La conférence 3. Les concerts 4. La musique Liste non ordonnée : #  Ma liste - La performance - La conférence - Les concerts - La musique Ou alors\nMa liste * La performance * La conférence * Les concerts * La musique  Citations #  Vous pouvez créer des citations en plaçant le symbole \u0026gt; avant chaque début de phrase, comme dans l’exemple suivant :\n\u0026gt; L’association INACT présente, depuis dix ans, des oeuvres \u0026gt; et des artistes hors formats, entre expériences plastiques, \u0026gt; défis esthétiques et pratiques intermédiaires Ce qui aura le résultat suivant :\n L’association INACT présente, depuis dix ans, des oeuvres et des artistes hors formats, entre expériences plastiques, défis esthétiques et pratiques intermédiaires\n "});index.add({'id':9,'href':'/docs/panel/utilisateurs/','title':"Comptes utilisateur·ice·s",'section':"Le Panel",'content':"Comptes utilisateur·ice·s #  Les comptes utilisateur·ice·s sont les accès qui permettent d’identifier les personnes qui peuvent accéder au Panel et modifier le site internet. Il peut y avoir avoir de compte que nécessaire.\nUn compte est la combinaison d’une adresse email, d’un mot de passe et d’un rôle. Normalement, si vous lisez ce guide, vous devez déjà posséder un compte utilisateur·ice, sinon, envoyez une demande à l’adresse email : contact@inact.fr avec une demande de création de compte.\nIl n’est pas recommandé d’employer un seul compte utilistateur·ice pour travailler à plusieurs personnes sur le site internet, ceci peut engendrer des pertes de données, où chaque personne écrase et efface le travail de l’autre. Vous devriez toujours créer un compte utilistateur·ice par personne travaillant sur le site.   Pages utilisateur·ice Vous pouvez gérer les utilisateur·ice·s du site depuis deux types de page distinct. Soit la page personnelle de chaque utilisateur·ice, soit la page d\u0026rsquo;ensemble de tous les utilisateur·ice·s.\nEn savoir plus   Actions de compte Chaque compte peut être créé, modifé ou supprimé, cette section détaille ces différentes actions.\nEn savoir plus    "});index.add({'id':10,'href':'/docs/contenu/kirbytext/','title':"Contenu dynamique",'section':"Le Contenu",'content':"Contenu dynamique #  Le Markdown possède sa propre extension au sein de Kirby, nommé le Kirbytext. Il vous permet de charger du contenu dynamiquement au sein des articles du site.\nLe Kirbytext vous permet d’employer les éléments de formatage suivants :\nDate #  Pour ajouter une date dynamique au texte, vous pouvez utiliser le balisage suivant :\nAfficher l’année actuelle (date: year) Afficher n’importe quelle date avec un formatage de date en chaîne de caractère PHP (date: d.m.Y H:i:s) Pour en savoir plus sur le formatage de date PHP, rendez-vous sur la documentation de PHP.\nPour plus d’option, visitez la documentation de Kirby (en anglais).\n Téléphone #  Vous pouvez intégrer des numéros de téléphones cliquables dans vos textes grâce au balisage suivant.\nPour afficher un numéro de téléphone seul seul :\n(tel: +33612345678) Pour afficher un numéro de téléphone avec du texte :\n(tel: +33612345678 text: Nous appeller) Pour plus d’option, visitez la documentation de Kirby (en anglais).\n Fichier #  Vous pouvez inclure le lien d’un fichier à télécharger grâce au balisage suivant.\nPour afficher un fichier importé dans la page en cours, utilisez simplement le nom du fichier.\n(file: monbeaupdf.pdf) Pour donner un texte au lien de téléchargement :\n(file: monbeaupdf.pdf text: Télécharger mon beau pdf) Pour lier un fichier d’une autre page du site internet :\n(file: une/autre/page/monbeaupdf.pdf text: Télécharger mon beau pdf) Pour plus d’option, visitez la documentation de Kirby (en anglais).\n Image #  Pour incorporer une image, utilisez le balisage suivant.\nPour afficher une image importée dans la page en cours, utilisez simplement le nom de l’image :\n(image: masuperimage.jpg) Pour utiliser une image d’une autre page :\n(image: une/autre/page/masuperimage.jpg) Pour afficher une image avec du texte alternatif :\n(image: masuperimage alt: C’est une super image) Pour afficher une image avec une légende :\n(image: masuperimage caption: J’ai prise cette image dans le parc) Pour plus d’option, visitez la documentation de Kirby (en anglais).\n Adresses emails #  Similaires aux emails créés en Markdown vous pouvez créer des liens emails détaillés à l’intérieur des textes grâce au Kirbytext.\nAfficher un email sans texte de lien :\n(email:contact@inact.fr) Ce qui affichera : contact@inact.fr\nAfficher un email avec du texte de lien :\n(email: contact@inact.fr text: Envoyez-moi un email) Ce qui affichera : Envoyez-moi un email\nPour plus d’option, visitez la documentation de Kirby (en anglais).\n Lien #  Similaires aux liens créés en Markdown vous pouvez créer des liens détaillés à l’intérieur des textes grâce au Kirbytext.\nPour afficher un lien avec du texte :\n(link: http://wikipedia.org text: Wikipedia) Pour afficher un lien interne au site internet :\n(link: une/page text: Lien vers une page interne) Pour afficher un lien dans une langue spécifique :\n(link: une/page lang: de) Pour afficher un lien avec une ancre :\n(link: #une-section text: Lien vers une section de la même page) Pour plus d’option, visitez la documentation de Kirby (en anglais).\n Audio #  Pour afficher un player audio au sein d’une page, utilisez le balisage suivant.\nCette fonctionnalité est encore en développement, elle peut ne pas fonctionner comme attendu.  Pour un fichier audio présent sur la page :\n(audio: monfichieraudio.mp3) Pour un fichier audio présent sur une autre page :\n(audio: une/autre/page/monfichieraudio.mp3) Pour un fichier audio avec une légende :\n(audio: monfichieraudio.mp3 caption: Écoutez mon fichier audio !)  Vidéo #  Vous pouvez intégrer des vidéos provenant de Youtube ou de Vimeo grâce au balisage suivant.\nIntégrer une vidéo depuis Youtube :\n(video: http://www.youtube.com/watch?v=lLuc6rtWkrM) Intégrer une vidéo depuis Vimeo :\n(video: http://vimeo.com/3432886) Intégrer une vidéo avec une légende :\n(video: http://youtu.be/lLuc6rtWkrM caption: This is a really nice video) Intégrer une vidéo avec des indications de taille pour l’iframe :\n(video: http://vimeo.com/3432886 width: 300 height: 200) "});index.add({'id':11,'href':'/docs/contenu/fichiers/','title':"Fichiers",'section':"Le Contenu",'content':"Fichiers #  Les pages peuvent contenir n\u0026rsquo;importe quel nombre d\u0026rsquo;images, de vidéos, de documents ou tout autre fichier. Ces fichiers sont stockés directement dans le dossier de la page.\nLes fichiers peuvent être (et sans s\u0026rsquo;y limiter):\n   Type Extensions     Images .jpg, .png, .gif, .eps, .svg, .ico, .tif, .wep, etc.   Documents .pdf, .doc, .docx, .md, .ppt, .rtf, .csv, etc.   Archives .zip, .gz, .tar, .tgz, .gzip, etc.   Vidéos .mov, .avi, .flv, .m4v, .movie, .mpe, .mpg, .mp4, .ogg, etc.   Audios .mp3, .aiff, .m4a, .midi, .waw, etc.   Code .css, .js, .json, .java, .html, .php, .rb, etc.    Et encore de nombreux autres types de fichiers.\nToutefois, le type de fichier qui va particulièrement nous intéresser ici sont les images.\n Page de fichier Comme tous les autres éléments du site internet, les fichiers possèdent leur propre page au sein du Panel.\nEn savoir plus   Gérer les fichiers Les pages de contenu possèdent une section Fichiers qui permet d\u0026rsquo;ajouter, de modifier ou de supprimer des fichiers.\nEn savoir plus   Utiliser les fichiers Comment importer des fichiers et indiquer à la page quel fichier utiliser\nEn savoir plus    "});index.add({'id':12,'href':'/docs/contenu/blocs/','title':"Blocs de page",'section':"Le Contenu",'content':"Blocs de page #  Le Panel permet une construction des pages du site internet grâce à un fonctionnement par blocs. Les blocs sont des éléments spécifiques de contenu, qui peuvent être paramétrés, et qui peuvent s\u0026rsquo;enchaîner sans ordre précis et autant de fois que nécessaires.\nLes blocs peuvent être des éléments textuels, des images, des boutons, des liens vers d\u0026rsquo;autres pages du site, etc. Ils sont parfaits pour vous permettre de créer des pages complexes, dynamiques et interactives, et ce, très simplement.\n Fonctionnement de l\u0026rsquo;éditeur Pour bien appréhender le fonctionnement de l\u0026rsquo;éditeur de bloc, il faut comprendre quelques éléments d\u0026rsquo;interface précis. Cette section en fait la liste.\nEn savoir plus   Différents types Chaque bloc contôle un type de contenu particulier, qui a un effet unique sur le front-office. Cette section détaille tous les différents blocs que vous pouvez rencontrer sur le Panel.\nEn savoir plus    "});index.add({'id':13,'href':'/docs/contenu/blocs/fonctionnement/','title':"Fonctionnement de l'éditeur de bloc",'section':"Blocs de page",'content':"Fonctionnement de l\u0026rsquo;éditeur de bloc #  L\u0026rsquo;éditeur de blocs fonctionne comme un aggrégateur de forumlaires. Différents types de champs pré-établis sont mis à disposition et vous pouvez choisir parmi l\u0026rsquo;un ou l\u0026rsquo;autre bloc, les enchaîner, les déplacer, les supprimer, etc.\nCette section couvre les détails techniques ce concernant pour que vous puissiez passer à la création le plus vite possible. De plus, comme le reste du Panel, l\u0026rsquo;éditeur de blocs est très intuitif.\nLe bloc vide #  De prime abord, vous allez être confronté à une vide, et à un bouton + ajouter à partir duquel vous pourrez ajouter votre premier bloc à la page. Au survol, la zone devient bleue.\n  Ajouter un bloc #  Cliquer sur le bouton + ajouter fait appraître une boîte modale à partir de laquelle vous pouvez choisir quel bloc vous souhaitez ajouter à la page. Vous pouvez alors selectionner un bloc et cliquez sur le bouton +.\nPour savoir quel type de bloc choisir, rendez-vous sur la page Différents types de blocs.\n  Aspect d\u0026rsquo;un bloc #  Votre premier bloc ajouté, il vous présente un formulaire vide à remplir, similaire à tous les autres formulaires du Panel. En dessous du formulaire, vous retrouvez à nouveau le bouton + ajouter, qui vous permet d\u0026rsquo;additionner un nouveau bloc à la page, et ainsi de suite.\nDans l\u0026rsquo;exemple suivant, un bloc Chapô à été ajouté à la page.\n Ensuite, un nouveau bloc Article à été ajouté en dessous de celui-ci.\n  Déplacer les blocs #  À gauche des blocs, vous retrouvez un bouton Déplacer, composé de six petits carrés grisés. Si vous cliquez dessus, vous pourrez déplacer les blocs les uns au dessus des autres, remontrer ou descendre un bloc, etc.\n  Options des blocs #  À droite des blocs, se trouve le bouton … des options supplémentaires. Il fait apparaître un menu déroulant avec de nouvelles options pour le bloc.\n    Options Description     Dupliquer Ce bouton vous permet de créer une copie conforme du bloc juste en dessous de celui-ci. Utile si vous souhaitez créer des blocs à la chaîne, ou pour reproduire un bloc en particulier   Supprimer Ce bouton vous permet de supprimer définitivement un bloc, et d\u0026rsquo;effacer son contenu.     Ajouter un bloc entre deux blocs #  Si vous passez la souris entre deux blocs, vous verrez apparaître une ligne pointillée bleue. C\u0026rsquo;est une raccourci pour ajouter un nouveau bloc entre deux blocs existants.\n "});index.add({'id':14,'href':'/docs/panel/utilisateurs/pages/','title':"Les pages des utilistateur·ice·s",'section':"Comptes utilisateur·ice·s",'content':"Les pages des utilistateur·ice·s #  Au sein du Panel, il est important de bien différencier la page Utilisateur, qui est la page personnelle de chaque utilisateur·ice du Panel, et la page Utilisateurs, qui regroupe l\u0026rsquo;ensemble des utilisateur·ice·s du Panel.\nPage Utilisateur #  Chaque compte possède une page spécifique qui les est dédiée. Elle recense les informations de ce compte et permet de modifier ses informations.\nPour accéder à une page compte, allez sur le hamburger du menu et cliquez sur le bouton votre compte.\n  Page Utilisateurs #  La page Utilisateurs regroupe tous les comptes utilistateur·ice·s que possède le site internet.\nVous pouvez accéder à des utilistateur·ice·s en particuliers, créer, modifier ou supprimer des comptes à partir de cette page. Pour vous y rendre, allez sur le hamburger et cliquer sur le bouton utilisateurs.\n "});index.add({'id':15,'href':'/docs/contenu/fichiers/page/','title':"Page de fichier",'section':"Fichiers",'content':"Page de fichier #  Le Panel vous permet de modifier les fichiers à partir de la page du fichier. C\u0026rsquo;est une page dédiée à un fichier qui vous présente de nombreuses informations le concernant, comme son nom, son poid, son type, etc. Pour les images, vous pouvez même trouver des informations concernant sa dimension ou son orientation.\nPour attendre la page d\u0026rsquo;un fichier, vous devez cliquez sur la boîte d\u0026rsquo;un fichier à partir d\u0026rsquo;une section de fichier dans une page de contenu, ou au sein champ de sélection de fichier.\nPar exemple, la capture d\u0026rsquo;écran suivant nous montre la page d\u0026rsquo;une photographie utilisée comme couverture de la page Festival du site.\n Paramètres du fichier #  Depuis la page d\u0026rsquo;un fichier, vous avez accès à plusieurs paramètres pour celui-ci. Pour y accéder, cliquez sur le bouton Paramètres (accompagné d\u0026rsquo;une icône représentant un rouage). Une menu déroulant apparaîtera avec plusieurs options.\n    Paramètre Description     Ouvrir Ce bouton vous permet d\u0026rsquo;ouvrir le fichier dans votre navigateur, depuis son URL média, ainsi d\u0026rsquo;accéder directement au fichier.   Renommer Ce paramètre vous donne la possibilité de renommer le fichier. Ça peut être très utile pour s\u0026rsquo;y retrouver parmis de nombreux fichiers ou photographie, de leur donner des noms reconnaissables.   Remplacer Ce bouton vous permet de remplacer le fichier, tout en conservant la page du fichier et les métadonnées renseignées. Très pratique pour mettre à jour une image avec une nouvelle version, sans perdre les modifications, par exemple.   Supprimer Ce bouton vous permet de supprimer un fichier du Panel, et ainsi d\u0026rsquo;effacer sa page.    Attention : Si vous renommez un fichier utilisé par une page de contenu, pensez à mettre à jour la sélection du ficher dans la page. En effet, la sélection de fichier fonctionne grâce au nom de fichier, aussi, la page ne trouvera plus le fichier renommé parce qu\u0026rsquo;il aura changé de nom.   Métadonnées #  La page d\u0026rsquo;un fichier nous permet de renseigner des informations supplémentaires sur le fichier. Notamment son texte alternatif et sa légende. Ces informations sont très importante concernant les images (voir essentielles).\nTexte alternatif #  Le texte alternatif accompagne un fichier et est affiché s\u0026rsquo;il est indisponnible. C\u0026rsquo;est notamment vrai pour les images, mais également les fichiers audios, vidéos ou les documents.\nC\u0026rsquo;est également le texte qui sera lu lorsque le site sera visité par l\u0026rsquo;intermédiaire de lecteurs d\u0026rsquo;écran. Aussi, son rôle est de décrire l\u0026rsquo;image le plus simplement et efficacement possible.\nLe texte alternatif joue également un rôle dans le S.E.O.1 et est pris en compte par les algorythmes des moteurs de recherche. Il contribue ainsi à l\u0026rsquo;optimisation du référencement du site internet.\n À propos : Le texte alternatif doit être composé avec du texte brut. Ainsi n\u0026rsquo;utilisez pas de Markdown dans ce champ, il ne serait pas compris pas le site internet.  La légende #  La légende est également un texte qui accompagne l\u0026rsquo;image, mais qui cette fois-ci est affichée sur le site internet quand c\u0026rsquo;est possible. Elle permet de donner un contexte à l\u0026rsquo;image, ou d\u0026rsquo;afficher les crédits d\u0026rsquo;une photographie.\nPar exemple, la capture suivante présente une image affichée sur le front-office avec sa légende.\n   Le S.E.O., ou Search Engigne Optimisation (Optimisation des moteurs de recherche en français) sont les manières d\u0026rsquo;améliorer la lecture et l\u0026rsquo;indexation d\u0026rsquo;un site internet par les algorythmes des moteurs de recherche comme Google ou Yahoo. L\u0026rsquo;une de ces manières est le référencement naturel pour lequel le texte alternatif joue. \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':16,'href':'/docs/contenu/pages/statuts/','title':"Statuts des pages",'section':"Pages et publications",'content':"Statuts des pages #  Dans le panel, les pages peuvent avoir l\u0026rsquo;un des trois statuts suivants :\nBrouillons Brouillons Les pages en état de brouillon n\u0026rsquo;existent qu\u0026rsquo;à l\u0026rsquo;intérieur du Panel. Ce sont des pages de en élaboration, qui permettent de travailler en amont de la publication. Elles sont invisbles depuis le front-office. Il n\u0026rsquo;y a que les utilisateur·ice·s connecté·e·s sur le Panel qui puissent les voir et les modifier.Non listées Non listées Les pages non listées ne sont pas visibles depuis le front-office mais sont accessibles au public depuis leur URL.\nAinsi, une page avec ce statut peut être une page spéciale, ou unique dans la hiérarchie du site. Par exemple, la page d\u0026rsquo;erreur est une page non listée.\nPublic / Publiées Public / Publiées Les pages en état public sont visible depuis le front-office et accessible au public. Elles sont publiées au sein du site internet et sont employées comme les pages actives du site.\nToutes les pages accessibles depuis le site internet, via des menus ou des liens, sont des pages publiées.\n Chaque statut est notifé par une couleur attribuée à la page :\n Les pages Brouillons sont représentés de couleur rouge. Les pages Non listées sont représentées par une couleur bleue. Les pages Public ou Publiées sont représentées par une couleur verte.   Organisation des pages par statut #  Les pages sont organisées dans le Panel en fonction de leur statut. Vous trouverez ainsi régluièrement des sections rassemblant toutes les pages publiques (ou publiées), d\u0026rsquo;autre rassemblant toutes les pages non listées et enfin, d\u0026rsquo;autres regroupant les brouillons.\nSouvent, ces sections prennent des présentations différentes et accordent plus d\u0026rsquo;importance visuelle aux pages publiées (ou publiques) pour bien les différencier des autres. Comme dans l\u0026rsquo;exemple suivant :\n  Changer le statut d\u0026rsquo;une page #  Pour publier une page, vous pouvez cliquer sur le bouton correspondant à son statut, par exemple : Brouillon, dans la barre d\u0026rsquo;outils de le page, ou alors cliquer sur le bouton Paramètres \u0026gt; Changer le status.\nLe formulaire de changement de statut apparaîtera alors, au sein duquel vous pourrez modfier l\u0026rsquo;état de la page.\n  Attention : Vous ne pourrez publier un brouillon que si tous les champs obligatoires de la page ont été rempli, et si tous les champs sont valides. Ceci pour éviter des erreurs dans le site internet.   Bon à savoir : La plupart du temps, il n\u0026rsquo;est pas nécessaire de supprimer une page, changer son statut de publiée à brouillon et suffisant pour ne plus la rendre visible sur le site et conserver le travail déjà effectué.   Statut vérouillé #  Pour certaine page du site, leur statut est vérouillé et il n\u0026rsquo;est pas possible de le changer. C\u0026rsquo;est principalement le cas pour les pages importantes du site, ou présentes à son premier niveau hiérarchique.\nCe sont des page qu\u0026rsquo;il ne sert à rien de dé-publier ou de masquer du site internet, au risque de créer des erreurs.\nLes pages au statut vérouillé sont visibles par l\u0026rsquo;icône d\u0026rsquo;un rond évidé et barré qui remplace le rond plein et coloré habituel.\n "});index.add({'id':17,'href':'/docs/panel/utilisateurs/actions/','title':"Actions de compte",'section':"Comptes utilisateur·ice·s",'content':"Actions de compte #  Tous les comptes peuvent être gérés et modifés depuis le Panel :\n Vous pouvez créer autant de compte que nécessaires. Modifier leur informations. Les supprimer au besoin.  Ces actions vous permettent de garder un travail d\u0026rsquo;équipe correctement organisé et efficace.\nCréer un compte utilisateur #  Pour créer un nouveau compte utilistateur·ice, ouvrez le menu avec le hamburger et cliquez sur le boutons Utilisateurs. Vous trouverez le bouton Ajouter un nouvel utilisateur dans le coin gauche de la page, qui vous amènera au formulaire de création d’utilistateur·ice.\n Remplissez les informations requises, comme l’adresse email et le mot de passe, et cliquez sur le bouton créer pour ajouter le·la nouvel·le utilistateur·ice. Également, renseigner la langue Français pour que l’interface du Panel soit en français pour cet·te utilisateur·ice.\nÀ propos Vous devriez éviter d\u0026rsquo;utiliser une même adresse email pour plusieurs utilisateur·ice·s du site, sinon cela risque d’engendrer des problèmes de connexion.  Attention Notez bien le mot de passe de l’utilisateur·ice à sa création, il n’y a pas de moyen de le récupérer par la suite.   Modifier un compte #  Pour accéder aux options d’un compte utilistateur·ice, cliquez sur l’icone options à côté de l’utilistateur·ice à partir de la page Utilisateurs pour ouvrir le menu déroulant comportant les options de modification.\n Vous pouvez également accéder au menu déroulant de modification à partir de la page d’un compte utilistateur·ice, en cliquant sur le bouton Paramètres.\n Les comptes utilisateur·ice·s sont identifiés par leur adresse email, cependant vous pouvez leur donner un nom plus reconnaissable. Il est possible de changer le nom à tout moment en cliquant sur le bouton Renommer cet utilisateur.\nVous pouvez également modifier l\u0026rsquo;adresse email, le mot de passe, et la langue utilisée par le Panel, et ce en cliquant sur les boutons correspondants.\n Supprimer un compte #  Pour supprimer un compte utilisateur·ice, cliquez sur le bouton Supprimer cet utilisateur. Tous les comptes peuvent être supprimés sauf le dernier d’entre eux.\n"});index.add({'id':18,'href':'/docs/contenu/blocs/types/','title':"Différents types de blocs",'section':"Blocs de page",'content':"Différents types de blocs #  Cette section détaille tous les blocs que vous pouvez rencontrer dans le panel, et leur équivalent au sein du front-office.\nVoici les différents blocs existants :\n Des blocs textuels comme l\u0026rsquo; Article, l\u0026rsquo; Emphase et le Chapô. Des blocs médias comme l\u0026rsquo; image seule ou les images multiples. Des blocs interactifs come les Boutons, la Performance, les Sponsors et le Téléchargement.  Blocs textuels #  Bloc Chapô #  Le Chapô est un bloc qui vous permet d\u0026rsquo;écrire du texte en très grand sur la page. Le texte sera écrit en Kame Poster. Il est idéal pour mettre une phrase synthèse en avant et résumer facilement une idée. De plus il apporte du rythme à la page et la rend très dynamique. Des associations qui fonctionnent très bien sont de positionner un Chapô juste après une Emphase et avant un Article.\nRemarquez également que de mettre du texte en gras1 dans un Chapô fait passer la typographie que la Kame Poster Regular à la Kame Poster Black.\nCi-dessous, un bloc Chapô dans le Panel :\n Son équivalent dans le front-office :\n Bloc Emphase #  L\u0026rsquo;Emphase est un bloc qui vous permet d\u0026rsquo;écrire du texte une taille au dessus du texte d\u0026rsquo;article standard. Cela vous permet de créer des introductions de section ou de page, d\u0026rsquo;alterner des niveaux hiérarchiques et de marquer plus clairement les informations importantes de la page. Une bonne position pour le bloc Emphase est au début d\u0026rsquo;une page, ou juste après un titre ou une image. Il est généralement suivi d\u0026rsquo;un bloc Article ou d\u0026rsquo;un bloc Chapô.\nRemarquez également que de mettre du texte en gras1 dans un bloc Emphase fera changer la couleur du texte en bleu.\nCi-dessous, un bloc Emphase dans le Panel :\n Son équivalent dans le front-office :\n Bloc Article #  L\u0026rsquo;Article est un bloc de base. C\u0026rsquo;est le plus versatile et celui qui offre le plus de possible de tous. De prime abord, il permet d\u0026rsquo;écrire du texte en Markdown, d\u0026rsquo;inclure du contenu dynamique, de structurer la page, d\u0026rsquo;intégrer des vidéos, des audios, des images, de mettre des liens, des adresses email, etc.\nCe le bloc qui sera le plus utilisé pour intégrer du contenu au sein du Panel. Tout ce qui est possible de réaliser avec un éditeur classique l\u0026rsquo;est au sein d\u0026rsquo;un bloc Article.\nCi-dessous, un bloc Article dans le Panel\n Son équivalent dans le front-office :\n Blocs médias #  Bloc Image #  L\u0026rsquo;image seule vous permet d\u0026rsquo;intégrer une grande image dans la page, avec une légende et un texte alternatif. Ce bloc est composé de trois champs :\n Un champ de sélection de fichier 2 pour choisir l\u0026rsquo;image à afficher. Un champ de de texte simple pour remplir le texte alternatif 3 de l\u0026rsquo;image. Un champ de de texte simple pour remplir la légende 3 de l\u0026rsquo;image.  Vous pouvez utiliser le champ d\u0026rsquo;image seule dès que vous souhaitez insérer une seule illustration dans le site internet.\nCi-dessous, un bloc Image seule dans le Panel\n Son équivalent dans le front-office :\n Bloc Images multiples #  Ce bloc vous permet de charger plusieurs images qui apparaîtront les unes à la suite des autres. Il se comporte comme un Champ de sélection de plusieurs fichiers.\n Bloc Performance #  Ce bloc vous permet de créer une boîte de promotion d\u0026rsquo;une performance d\u0026rsquo;une ancienne édition du festival INACT. Ceci, pour illustrer une page, amener des éléments visuels forts et créer des circulations dans le site internet.\nLe bloc se présente comme un formulaire de sélection de page. Cliquez sur le bouton + ajouter pour ajouter une performance et sélectionnez celle que vous souhaitez, soit grâce au navigateur de page, soit par la barre de recherche. Vous ne pouvez sélectionner qu\u0026rsquo;une seule performance par bloc, mais rien ne vous empêche d\u0026rsquo;enchaîner plusieurs blocs à la suite.\nC\u0026rsquo;est l\u0026rsquo;image de couverture de la performance qui est choisie pour fonctionner avec le bloc performance.\nLe bloc performance vide :\n Lorsqu\u0026rsquo;une performance est sélectionnée, son image de couverture apparaît en grand :\n Le bloc performance tel qu\u0026rsquo;il apparaît dans le front-office.\n Blocs interactifs #  Bloc Boutons #  Ce bloc vous permet de créer des boutons et de les intégrer sur le site. Les boutons peuvent être des liens amenant vers une page interne du site internet, une page web externe ou un fichier à télécharger. Le bloc est limité à un maximum de trois boutons.\nPour ajouter votre premier bouton, cliquez sur + ajouter et remplissez le formulaire de création de bouton. Choisiez ensuite le type de votre bouton et remplissez les champ de sélection correspondant au contenu que vous souhaitez relier au bouton.\nCi dessous, le forumlaire de création de bouton :\n    Type Description Icône     Lien interne Ce bouton vous permet de pointer vers une page du site internet. Vous pouvez choisir la page précisement grâce à une boîte modale et une barre de recherche. Œil   Lien externe Ce bouton pointe vers une page externe du site internet. Pour ce faire, vous devez fournir une URL dans le champ correspondant. Nouvelle page   Fichier Ce bouton vous permet de proposer un fichier au téléchargement. Sélectionnez alors le fichier à télécharger, il doit être importé au sein de la page. Télécharger    Lorsque le forumlaire est rempli, les différents boutons se réduisent sous la forme d\u0026rsquo;un tableau. Cliquez sur la ligne du tableau correspondant au bouton pour modifier son formulaire.\n Ici, les trois différents boutons, tels qu\u0026rsquo;ils apparaissent sur le front-office.\n Bloc Sponsors #  Le bloc sponsors vous permet d\u0026rsquo;afficher une collection des logotypes des sponsors de l\u0026rsquo;association. Chaque logotype est un lien vers le site du sponsor en question.\nPour ajouter un sponsor, cliquez sur le bouton + ajouter et sélectionnez les sponsors que vous souhaitez afficher.\n:::note À propos Ce bloc vous permet uniquement de composer une collection distincte. Pour modifier les logotypes, le titre ou les liens des sponsors, vous devez vous rendre dans la page Presse :::\nLe bloc sponsors dans le Panel : Ce même bloc dans le front-office : Bloc Téléchargement #  Le bloc téléchargement vous permet de créer une série de bouton de téléchargement de fichier. C\u0026rsquo;est un équivalent du bloc Boutons mais uniquement dédié aux téléchargements. De plus, il vous permet d\u0026rsquo;activer ou de désactiver l\u0026rsquo;apparition des boutons sur le front-office sans avoir à supprimer le bloc.\nPour ajouter un nouveau fichier à télécharger, cliquez sur le bouton + ajouter. Vous pourrez alors remplir un formulaire concernant le fichier.\nIci, le bloc Téléchargement vide :\n Le formulaire de renseignement pour ajouter un nouveau fichier :\n    Champ  Description     Fichier Ce champ vous permet de sélectionner le fichier, parmi tout ceux que possède la page, à proposer au téléchargement.   Nom du fichier Vous pouvez ici renseigner le nom public du fichier. C\u0026rsquo;est le nom qui sera donné au fichier lorsqu\u0026rsquo;il sera téléchargé.   Le fichier est téléchargeable Ce bouton on/off vous permet de décider si oui ou non le fichier est affiché sur le front-office.    Le bloc Téléchargement dans le front-office :\n   Pour en savoir plus sur le balisage, consultez la page sur le Markdown. \u0026#x21a9;\u0026#xfe0e;\n Retrouvez plus d\u0026rsquo;information sur les fichiers dans la section dédiée de la documentation : Utiliser les fichiers. \u0026#x21a9;\u0026#xfe0e;\n Le texte alternatif et la légende sont des métadonnées d\u0026rsquo;un fichier. Habituellement, elles se remplissent dans la page du fichier, mais sont ici apparentes directement dans la page de contenu. Retrouvez plus d\u0026rsquo;informations dans la section dédiée de la documentation : Page de fichier. \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':19,'href':'/docs/contenu/fichiers/section/','title':"Gérer les fichiers",'section':"Fichiers",'content':"Gérer les fichiers #  Pour la pluspart des pages, vous verrez un onglet Fichiers à gauche de la barre d\u0026rsquo;onglet de la page, avec un accès rapide à tous les fichiers de la page.\n Outils #  Cette section regroupe tous les fichiers qui ont été importé dans cette page de contenu. Vous pouvez cliquer sur un fichier pour accéder à sa page de fichier, ou alors gérer ses paramètres directement depuis cette section.\n   Élément Description     Aperçu du fichier Si le fichier est une image, vous avez un aperçu de celle-ci dans le corps de la boîte de fichier. Sinon, le fichier sera représenté par une icône proche de son type (Par exemple : un document pour un .pdf, une note de musique pour un .mp3…)   Nom du fichier Le nom du fichier est affiché juste en dessous de l\u0026rsquo;aperçu. La plupart du temps, les fichiers sont classés par ordre alphabétique, ainsi il peut être intéressant de renommer les fichiers en amont pour s\u0026rsquo;organiser.   Bouton d\u0026rsquo;organisation des fichiers Vous pouvez déplacez et ordonner les fichiers comme bon vous semble. Ceci, en cliquant sur le bouton en haut à droite de la boîte de fichier, qui apparaît au survol, et en déplaçant le fichier à l\u0026rsquo;endroit voulu.   Bouton … d\u0026rsquo;options supplémentaires Ce bouton vous permet d\u0026rsquo;accéder au menu déroulant des paramètres du fichier     Organiser les fichiers #  Ici, le bouton composé de six petits carrés noir dans un carré blanc vous permet de déplacer les fichiers et de les organiser. Il apparaît au survol de la boîte de fichier avec la souris.\n "});index.add({'id':20,'href':'/docs/contenu/pages/sections/','title':"Sections de pages",'section':"Pages et publications",'content':"Sections de pages #  Au sein du Panel, vous rencontrerez réguilièrement des sections regroupant différentes pages. Ce sont les sections de pages.\nElles se présentent de différentes manière, selon le modèle de la page, sa portée, etc. Cette partie de la documentation regroupe ces différentes sections et en éclairci les particularités.\n La liste de pages #  Ces section présente les pages sous la forme de liste, la plus part du temps triées par date, ou par ordre alphabétique.\nLa liste est elle-même divisée en trois catégories, représentant les statuts des pages. L\u0026rsquo;exemple suivant, tiré de la page Actualités présente une section de page en liste avec les actualités du site internet.\n    Élément Description     Aperçu de la page Les listes utilisent souvent les images de couverture des pages, ou alors des icones, pour présenter un premier aperçu de la page. Vous pouvez cliquez sur ce carré pour ouvrir la page en question   Titre de la page Le deuxième élément distinctif est le titre de la page, qui est également cliquable pour ouvrir la page   Date de publication Les pages sont ensuite séparées par leur dates de publication, surtout lorsqu\u0026rsquo;elles sont tirées par ordre chronologique   Statut de la page Un disque de couleur indique le statut de la page. Le disque est vert lorsque la page est publique (ou publiée). Le disque est bleu lorsque la page est non-listée. Le disque est rouge lorsque la pages est un brouillon   Le bouton … des options supplémentaires Ce bouton permet d\u0026rsquo;ouvrir un menu déroulant d\u0026rsquo;options supplémentaires.     Les sections de pages importantes #  Dans certains cas, les pages publiées (ou publiques) ont une importance primordiales au sein du site internet. Elles sont alors présentées dans des sections plus grandes, avec des boîtes de pages au lieu de la liste habituelle. Les images de couverture ou les icônes prennent alors plus de place, mais les différents boutons restent les même. On retrouve le titre de la page, son statut et le bouton … d\u0026rsquo;options supplémentaires.\nLes exemples suivants présentent des sections importantes, notamment celle des Pages de premier niveau du site mise en avant par des icônes, et les pages des Éditions précédentes du festival, distinguées par leur image de couverture.\n   Le tableau de pages #  Dans un cas particulier, qui est la liste des performances d\u0026rsquo;une ancienne édition du festival, les pages sont présentées sous la forme d\u0026rsquo;un tableau, regroupant de nombreuses informations les concernant. Ceci pour accélerer la gestion des pages et le travail sur de nombreuses pages à la suite.\nVous pouvez en savoir plus dans la section Archives de la documentation, qui lui est dédiée.\n "});index.add({'id':21,'href':'/docs/contenu/pages/creation/','title':"Créer une page",'section':"Pages et publications",'content':"Créer une page #  Pour créer une page, cliquez sur le bouton + ajouter dans le coin supérieur droit d\u0026rsquo;une section de pages.\nForumlaire de création #  Toutes les nouvelles pages dans le Panel sont crées avec un statut de brouillon, ceci, pour éviter la publication accidentelle d\u0026rsquo;une page pas encore prête. Ainsi, la création de nouvelles pages n\u0026rsquo;est possible que depuis une section Brouillons.\n Vous devrez alors remplir le formulaire de création de page qui vous demandera deux informations essentielles, obligatoires et fortements liées, qui sont : le titre de la page, et son identifiant.\n Une fois une page créé, vous arriverez sur un modèle vierge de page, qu\u0026rsquo;il vous faudra remplir avec les informations requises.\n Titre et identifiant de la page #     Information Description     Titre de la page Le titre d\u0026rsquo;une page peut être soit son nom commun d\u0026rsquo;usage, comme Contact pour la page de contact, ou le titre d\u0026rsquo;un texte si la page est un article de blog, par exemple Mon super article.   Identifiant de la page L\u0026rsquo;identifiant d\u0026rsquo;une page va être le texte de réfenrence utilisé dans l\u0026rsquo;URL de la page. Aussi, il ne doit contenir ni espace, ni caractère spécial. Par défaut, il est créé automatiquement à partir du titre de la page, par exemple : contact. Mais il est également possible de le prersonnaliser, notamment pour créer des URLs courtes et reconnaissable, par exemple : super-acticle qui donnera inact.fr/blog/super-article pour le titre Mon super article.    Le titre d\u0026rsquo;une page et son identifiant ne sont lié qu\u0026rsquo;à la création d\u0026rsquo;une page. Si vous changez le titre d\u0026rsquo;une page a postériori, son identifiant ne sera pas automatiquement mis à jour. Pensez alors à changer l\u0026rsquo;identifiant en même temps si le changement de titre est conséquent.  Attention Si vous changez l\u0026rsquo;identifiant d\u0026rsquo;une page, pensez bien à vérifier bien que la page n\u0026rsquo;est pas appellée à un autre endroit du Panel. Si c\u0026rsquo;est le cas, mettez à jour l\u0026rsquo;appel de la page avec le nouvel identifiant, sinon l\u0026rsquo;appel ne fonctionnera plus.   URL de la page #  Pour comprendre le lien entre l\u0026rsquo;identifiant d\u0026rsquo;une page et son URL, il faut comprendre comment est composé l\u0026rsquo;URL.\n L\u0026rsquo;URL indique la position de la page dans la hiérarchie du site. La racine, ou le site en lui-même est représenté par l\u0026rsquo;URL : www.inact.fr. Une page de premier niveau, ou positionnée directement à la racine, vera son identifiant placé juste après l\u0026rsquo;URL de la racine. Ainsi www.inact.fr/contact pour la page Contact, www.inact.fr/archives pour la page Archives. Une page située à l\u0026rsquo;intérieur d\u0026rsquo;une page de premier niveau vera son identifiant ajouté à la suite de celui de sa page parente. Par exemple, l\u0026rsquo;URL suivante : www.inact.fr/archives/l-epaisseur-de-la-transparence représente la page L\u0026rsquo;épaisseur de la transparence qui est située au sein de la page Archive qui est une page de premier niveau du site.  Dans cette logique, le schéma de page suivant :\nRacine ├── Contact └── Archives ├── L'épaisseur de la transparence └── Sur Sens    mermaid.initialize({ flowchart: { useMaxWidth:true } });  graph LR 0[Racine] 1[Contact] 2[Archives] 21[L'épaisseur de la transparence] 22[Sur Sens] 211[Quantum Enigma] 212[Mort rêvée] 0 --- 1 0 --- 2 2 --- 21 2 --- 22 21 --- 211 21 --- 212  Équivaut à :\ngraph LR 0{{www.inact.fr}} 1{{/contact}} 2{{/archives}} 21{{/l-epaisseur-de-la-transparence}} 22{{/sur-sen}} 211{{/quantum-enigma}} 212{{/mort-revee}} 0 --- 1 0 --- 2 2 --- 21 2 --- 22 21 --- 211 21 --- 212 Et ainsi de suite pour toute l\u0026rsquo;arborescence du site internet.\n"});index.add({'id':22,'href':'/docs/contenu/fichiers/utilisation/','title':"Utiliser les fichiers",'section':"Fichiers",'content':"Utiliser les fichiers #  Pour utiliser des fichier au sein d\u0026rsquo;une page de contenu, vous devez d\u0026rsquo;abord les importer au sein de celle-ci. Ensuite, vous pourrez indiquer à la page quels fichiers utiliser parmi tout ceux que vous aurez importé.\nVous rencontrerez plusieurs type de champ de sélection de fichiers au sein du Panel, cette section couvre les plus communs, mais tous fonctionnent sur le même modèle. Avec un état vide et un état rempli.\nChamp de sélection de fichier unique #  Par exemple, le champ suivant vous demande de choisir une image qui sera la couverture de la page parmis tous les fichiers importé sur la page. Le champ de sélection est en état vide et vous indique qu\u0026rsquo;aucun fichier n\u0026rsquo;a encore été sélectionné.\n Lorsque vous cliquez sur le champ, ou sur le bouton + ajouter un formulaire de sélection apparaît ou vous pouvez choisir un fichier adapté parmi ceux que possède la page.\n Conseil : Remarquez la barre de recherche au dessus du formulaire, elle vous permet de rechercher des fichiers par leur nom. Très utile si la page possède plusieurs dizaines de fichiers.  Une fois le fichier sélectionné, le champ afficera un état rempli, avec un aperçu du fichier. Le champ ne requiérant qu\u0026rsquo;un seul fichier, le bouton + ajouter a disparu.\nSi vous souhaitez changer le fichier, vous devez d\u0026rsquo;abord dé-sélectionner le fichier déjà choisi, pour ensuite en choisir un nouveau. Pour dé-sélectionner un fichier, cliquez sur le bouton -.\n  Champ de sélection de plusieurs fichiers #  De la même façon qu\u0026rsquo;une champ de sélection de fichier unique, ce champ-ci possède un état vide et un état rempli et peut être rempli grâce à un formulaire de sélection.\nIl est possible qu\u0026rsquo;un champ de sélection multiple ai un nombre limite maximal de fichier sélectionnés, à ce moment, le bouton + ajouter disparaît du champ.\n  Champ de sélection spéciaux #  Dans certains cas, vous rencontrerez des champs de sélection de fichiers spécifique, avec des demandes d\u0026rsquo;informations particulières.\nPar exemple, le forumlaire suivant vous demande de sélectionner une image, et de reseigner une légende et un texte alternatif juste après. Dans ce cas-ci, le texte alternatif renseigné dans la page de contenu est plus important que celui reseigné dans la page du fichier, et sera choisi pour accompagner l\u0026rsquo;image.\n "});index.add({'id':23,'href':'/docs/contenu/pages/parametres/','title':"Paramètres et suppression",'section':"Pages et publications",'content':"Paramètres des pages et suppression #  Chaque page possède plusieurs informations essentielles, qui sont la plupart du temps décidées par avance ou à sa création. Vous pouvez modifer ces informations au besoin dans les paramètres de la page.\nLes paramètres #  Les paramètres sont accessibles soit :\n Depuis la barre d\u0026rsquo;outil de la page, en haut à droite, sous son titre. Depuis le bouton … dans les sections de pages, situé le plus souvent à gauche de la boîte de page, ou en dessous de la carte de page.    Liste des paramètres #     Paramètre Description     Ouvrir Ce bouton est accessible depuis les sections de pages, et vous permet d\u0026rsquo;ouvrir la page du Panel correspondant à cette page du site.   Renommer Cette option vous permet de changer le titre d\u0026rsquo;une page.   Dupliquer Cette option vous permet de créer une copie conforme de la page en lui donnant un nouveau titre et un nouvel identifiant.   Modifier l\u0026rsquo;URL Cette option vous permet de changer l\u0026rsquo;identifiant de la page, et ainsi de modifier son URL au sein du site.   Changer le statut Cette option vous permet de changer le statut d\u0026rsquo;une page, entre Brouillon, Non listée ou Publiée.   Changer le modèle Vous pouvez changer le template, ou modèle d\u0026rsquo;une page. Cette option est inaccessible par défaut dans le Panel pour le site d\u0026rsquo;INACT, car les modèles sont toujours uniques.   Supprimer Ce bouton vous permet de supprimer la page, son contenu et éventuellement ces sous-pages. C\u0026rsquo;est une action qui n\u0026rsquo;est pas à prendre à la légère car il n\u0026rsquo;est pas possible de récupérer du contenu supprimé     Supprimer une page #  Pour supprimer une page, cliquez sur le bouton suprimmer dans les Paramètres de le page.\nUne boîte modale d\u0026rsquo;information vous demandera, par précaution, de confirmer votre choix et la suppression de la page.\nSi la page possède des sous-pages, la boîte modale vous demandera d\u0026rsquo;écrire le nom de la page pour confirmer votre choix, et ainsi éviter des erreurs potentiellement désastreuses pour le site.\n "});index.add({'id':24,'href':'/docs/contenu/pages/edition/','title':"Édition des pages et travail collaboratif",'section':"Pages et publications",'content':"Édition des pages et travail collaboratif #  Plusieurs paramètres vous permettent de modifer le contenu des pages et d\u0026rsquo;éviter les pertes accidentelles de votre travail ou de celui de vos collaborateur·ice·s.\nVérouillage de contenu #  Le Panel va automatiquement vérouiller les pages en train d\u0026rsquo;être éditée par un·e autre utilisateur·ice connecté·e au Panel. Ainsi le travail équipe est beaucoup plus sûr. Si vous ouvrez une page en train d\u0026rsquo;être éditée par un·e autre utilisateur·ice, vous en serez informé et ne pourrez pas écraser leur changements.\n À propos : Cette fonctionnalité du Panel rappèle pourquoi il est très important que chaque utilisateur·ice possède un compte propre. Comme cela, chacun·e peut travailler en toute sérénité.   Modification non enregistrées #  Quand vous éditez des pages, des fichiers ou des comptes utilisateur·ice, vous verrez une icone Modification non enregistrées représentée par un crayon, dans le header du Panel. Cet apreçu des changements rend beaucoup plus simple le suivi des contenus dont la création est toujours en cours.\n "});index.add({'id':25,'href':'/posts/goisforlovers/','title':"(Hu)go Template Primer",'section':"Blog",'content':"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates #  Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax #  Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables #  Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions #  Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes #  When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic #  Go templates provide the most basic iteration and conditional logic.\nIteration #  Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals #  If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes #  One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) #  The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters #  Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters #  In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026quot;Permalinks\u0026quot; date: \u0026quot;2013-11-18\u0026quot; aliases: - \u0026quot;/doc/permalinks/\u0026quot; groups: [\u0026quot;extras\u0026quot;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters #  In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot; alt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "});index.add({'id':26,'href':'/posts/hugoisforlovers/','title':"Getting Started with Hugo",'section':"Blog",'content':"Step 1. Install Hugo #  Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs #  Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site #  Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun #  The best way to learn something is to play with it.\n"});})();